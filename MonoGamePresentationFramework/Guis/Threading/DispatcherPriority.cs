using System;
using System.Collections.Generic;
using System.Text;

namespace MonoGame.Guis.Threading
{
	//
	// 概要:
	//     位置による操作を呼び出すことが優先度の説明、 System.Windows.Threading.Dispatcherです。
	public enum DispatcherPriority
	{
		//
		// 概要:
		//     列挙値は-1 です。 これは、無効な優先順位です。
		Invalid = -1,
		//
		// 概要:
		//     列挙値は 0 です。 操作は処理されません。
		Inactive = 0,
		//
		// 概要:
		//     列挙値は 1 です。 操作は、システムがアイドル状態のときに処理されます。
		SystemIdle = 1,
		//
		// 概要:
		//     列挙値は 2 です。 操作は、アプリケーションがアイドル状態のときに処理されます。
		ApplicationIdle = 2,
		//
		// 概要:
		//     列挙値は 3 です。 操作は、バック グラウンド操作が完了した後で処理されます。
		ContextIdle = 3,
		//
		// 概要:
		//     列挙値は 4 です。 操作は、すべての他の非アイドルの操作が完了した後で処理されます。
		Background = 4,
		//
		// 概要:
		//     列挙値は 5 です。 操作は、入力と同じ優先順位で処理されます。
		Input = 5,
		//
		// 概要:
		//     列挙値は、6 です。 操作は、レイアウトとレンダリングが完了すると、入力の優先順位の項目を処理する前に処理されます。 具体的には、Loaded イベントを発生させる場合に使用されます。
		Loaded = 6,
		//
		// 概要:
		//     列挙値は 7 です。 表示と同じ優先順位で処理します。
		Render = 7,
		//
		// 概要:
		//     列挙値は 8 です。 操作は、データ バインドと同じ優先順位で処理されます。
		DataBind = 8,
		//
		// 概要:
		//     列挙値が 9 です。 操作は、通常の優先順位で処理されます。 これは、一般的なアプリケーションの優先順位です。
		Normal = 9,
		//
		// 概要:
		//     列挙値は 10 です。 操作は、その他の非同期操作の前に処理されます。 これは、最高の優先順位です。
		Send = 10
	}
}
